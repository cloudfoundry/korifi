// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/api/authorization"
	"code.cloudfoundry.org/korifi/api/handlers"
	"code.cloudfoundry.org/korifi/api/repositories"
)

type LogRepository struct {
	GetAppLogsStub        func(context.Context, authorization.Info, repositories.GetLogsMessage) ([]repositories.LogRecord, error)
	getAppLogsMutex       sync.RWMutex
	getAppLogsArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.GetLogsMessage
	}
	getAppLogsReturns struct {
		result1 []repositories.LogRecord
		result2 error
	}
	getAppLogsReturnsOnCall map[int]struct {
		result1 []repositories.LogRecord
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LogRepository) GetAppLogs(arg1 context.Context, arg2 authorization.Info, arg3 repositories.GetLogsMessage) ([]repositories.LogRecord, error) {
	fake.getAppLogsMutex.Lock()
	ret, specificReturn := fake.getAppLogsReturnsOnCall[len(fake.getAppLogsArgsForCall)]
	fake.getAppLogsArgsForCall = append(fake.getAppLogsArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.GetLogsMessage
	}{arg1, arg2, arg3})
	stub := fake.GetAppLogsStub
	fakeReturns := fake.getAppLogsReturns
	fake.recordInvocation("GetAppLogs", []interface{}{arg1, arg2, arg3})
	fake.getAppLogsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *LogRepository) GetAppLogsCallCount() int {
	fake.getAppLogsMutex.RLock()
	defer fake.getAppLogsMutex.RUnlock()
	return len(fake.getAppLogsArgsForCall)
}

func (fake *LogRepository) GetAppLogsCalls(stub func(context.Context, authorization.Info, repositories.GetLogsMessage) ([]repositories.LogRecord, error)) {
	fake.getAppLogsMutex.Lock()
	defer fake.getAppLogsMutex.Unlock()
	fake.GetAppLogsStub = stub
}

func (fake *LogRepository) GetAppLogsArgsForCall(i int) (context.Context, authorization.Info, repositories.GetLogsMessage) {
	fake.getAppLogsMutex.RLock()
	defer fake.getAppLogsMutex.RUnlock()
	argsForCall := fake.getAppLogsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *LogRepository) GetAppLogsReturns(result1 []repositories.LogRecord, result2 error) {
	fake.getAppLogsMutex.Lock()
	defer fake.getAppLogsMutex.Unlock()
	fake.GetAppLogsStub = nil
	fake.getAppLogsReturns = struct {
		result1 []repositories.LogRecord
		result2 error
	}{result1, result2}
}

func (fake *LogRepository) GetAppLogsReturnsOnCall(i int, result1 []repositories.LogRecord, result2 error) {
	fake.getAppLogsMutex.Lock()
	defer fake.getAppLogsMutex.Unlock()
	fake.GetAppLogsStub = nil
	if fake.getAppLogsReturnsOnCall == nil {
		fake.getAppLogsReturnsOnCall = make(map[int]struct {
			result1 []repositories.LogRecord
			result2 error
		})
	}
	fake.getAppLogsReturnsOnCall[i] = struct {
		result1 []repositories.LogRecord
		result2 error
	}{result1, result2}
}

func (fake *LogRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LogRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.LogRepository = new(LogRepository)
