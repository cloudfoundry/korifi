// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/api/actions"
	"code.cloudfoundry.org/korifi/api/authorization"
	"code.cloudfoundry.org/korifi/api/repositories"
)

type MetricsRepository struct {
	GetMetricsStub        func(context.Context, authorization.Info, repositories.AppRecord, string) ([]repositories.PodMetrics, error)
	getMetricsMutex       sync.RWMutex
	getMetricsArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.AppRecord
		arg4 string
	}
	getMetricsReturns struct {
		result1 []repositories.PodMetrics
		result2 error
	}
	getMetricsReturnsOnCall map[int]struct {
		result1 []repositories.PodMetrics
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MetricsRepository) GetMetrics(arg1 context.Context, arg2 authorization.Info, arg3 repositories.AppRecord, arg4 string) ([]repositories.PodMetrics, error) {
	fake.getMetricsMutex.Lock()
	ret, specificReturn := fake.getMetricsReturnsOnCall[len(fake.getMetricsArgsForCall)]
	fake.getMetricsArgsForCall = append(fake.getMetricsArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Info
		arg3 repositories.AppRecord
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetMetricsStub
	fakeReturns := fake.getMetricsReturns
	fake.recordInvocation("GetMetrics", []interface{}{arg1, arg2, arg3, arg4})
	fake.getMetricsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MetricsRepository) GetMetricsCallCount() int {
	fake.getMetricsMutex.RLock()
	defer fake.getMetricsMutex.RUnlock()
	return len(fake.getMetricsArgsForCall)
}

func (fake *MetricsRepository) GetMetricsCalls(stub func(context.Context, authorization.Info, repositories.AppRecord, string) ([]repositories.PodMetrics, error)) {
	fake.getMetricsMutex.Lock()
	defer fake.getMetricsMutex.Unlock()
	fake.GetMetricsStub = stub
}

func (fake *MetricsRepository) GetMetricsArgsForCall(i int) (context.Context, authorization.Info, repositories.AppRecord, string) {
	fake.getMetricsMutex.RLock()
	defer fake.getMetricsMutex.RUnlock()
	argsForCall := fake.getMetricsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *MetricsRepository) GetMetricsReturns(result1 []repositories.PodMetrics, result2 error) {
	fake.getMetricsMutex.Lock()
	defer fake.getMetricsMutex.Unlock()
	fake.GetMetricsStub = nil
	fake.getMetricsReturns = struct {
		result1 []repositories.PodMetrics
		result2 error
	}{result1, result2}
}

func (fake *MetricsRepository) GetMetricsReturnsOnCall(i int, result1 []repositories.PodMetrics, result2 error) {
	fake.getMetricsMutex.Lock()
	defer fake.getMetricsMutex.Unlock()
	fake.GetMetricsStub = nil
	if fake.getMetricsReturnsOnCall == nil {
		fake.getMetricsReturnsOnCall = make(map[int]struct {
			result1 []repositories.PodMetrics
			result2 error
		})
	}
	fake.getMetricsReturnsOnCall[i] = struct {
		result1 []repositories.PodMetrics
		result2 error
	}{result1, result2}
}

func (fake *MetricsRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMetricsMutex.RLock()
	defer fake.getMetricsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MetricsRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actions.MetricsRepository = new(MetricsRepository)
