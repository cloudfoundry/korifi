// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"code.cloudfoundry.org/korifi/api/repositories"
)

type ListOption struct {
	ApplyToListStub        func(*repositories.ListOptions) error
	applyToListMutex       sync.RWMutex
	applyToListArgsForCall []struct {
		arg1 *repositories.ListOptions
	}
	applyToListReturns struct {
		result1 error
	}
	applyToListReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ListOption) ApplyToList(arg1 *repositories.ListOptions) error {
	fake.applyToListMutex.Lock()
	ret, specificReturn := fake.applyToListReturnsOnCall[len(fake.applyToListArgsForCall)]
	fake.applyToListArgsForCall = append(fake.applyToListArgsForCall, struct {
		arg1 *repositories.ListOptions
	}{arg1})
	stub := fake.ApplyToListStub
	fakeReturns := fake.applyToListReturns
	fake.recordInvocation("ApplyToList", []interface{}{arg1})
	fake.applyToListMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ListOption) ApplyToListCallCount() int {
	fake.applyToListMutex.RLock()
	defer fake.applyToListMutex.RUnlock()
	return len(fake.applyToListArgsForCall)
}

func (fake *ListOption) ApplyToListCalls(stub func(*repositories.ListOptions) error) {
	fake.applyToListMutex.Lock()
	defer fake.applyToListMutex.Unlock()
	fake.ApplyToListStub = stub
}

func (fake *ListOption) ApplyToListArgsForCall(i int) *repositories.ListOptions {
	fake.applyToListMutex.RLock()
	defer fake.applyToListMutex.RUnlock()
	argsForCall := fake.applyToListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ListOption) ApplyToListReturns(result1 error) {
	fake.applyToListMutex.Lock()
	defer fake.applyToListMutex.Unlock()
	fake.ApplyToListStub = nil
	fake.applyToListReturns = struct {
		result1 error
	}{result1}
}

func (fake *ListOption) ApplyToListReturnsOnCall(i int, result1 error) {
	fake.applyToListMutex.Lock()
	defer fake.applyToListMutex.Unlock()
	fake.ApplyToListStub = nil
	if fake.applyToListReturnsOnCall == nil {
		fake.applyToListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyToListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ListOption) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyToListMutex.RLock()
	defer fake.applyToListMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ListOption) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.ListOption = new(ListOption)
