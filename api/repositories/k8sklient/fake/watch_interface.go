// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"k8s.io/apimachinery/pkg/watch"
)

type WatchInterface struct {
	ResultChanStub        func() <-chan watch.Event
	resultChanMutex       sync.RWMutex
	resultChanArgsForCall []struct {
	}
	resultChanReturns struct {
		result1 <-chan watch.Event
	}
	resultChanReturnsOnCall map[int]struct {
		result1 <-chan watch.Event
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *WatchInterface) ResultChan() <-chan watch.Event {
	fake.resultChanMutex.Lock()
	ret, specificReturn := fake.resultChanReturnsOnCall[len(fake.resultChanArgsForCall)]
	fake.resultChanArgsForCall = append(fake.resultChanArgsForCall, struct {
	}{})
	stub := fake.ResultChanStub
	fakeReturns := fake.resultChanReturns
	fake.recordInvocation("ResultChan", []interface{}{})
	fake.resultChanMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *WatchInterface) ResultChanCallCount() int {
	fake.resultChanMutex.RLock()
	defer fake.resultChanMutex.RUnlock()
	return len(fake.resultChanArgsForCall)
}

func (fake *WatchInterface) ResultChanCalls(stub func() <-chan watch.Event) {
	fake.resultChanMutex.Lock()
	defer fake.resultChanMutex.Unlock()
	fake.ResultChanStub = stub
}

func (fake *WatchInterface) ResultChanReturns(result1 <-chan watch.Event) {
	fake.resultChanMutex.Lock()
	defer fake.resultChanMutex.Unlock()
	fake.ResultChanStub = nil
	fake.resultChanReturns = struct {
		result1 <-chan watch.Event
	}{result1}
}

func (fake *WatchInterface) ResultChanReturnsOnCall(i int, result1 <-chan watch.Event) {
	fake.resultChanMutex.Lock()
	defer fake.resultChanMutex.Unlock()
	fake.ResultChanStub = nil
	if fake.resultChanReturnsOnCall == nil {
		fake.resultChanReturnsOnCall = make(map[int]struct {
			result1 <-chan watch.Event
		})
	}
	fake.resultChanReturnsOnCall[i] = struct {
		result1 <-chan watch.Event
	}{result1}
}

func (fake *WatchInterface) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	stub := fake.StopStub
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if stub != nil {
		fake.StopStub()
	}
}

func (fake *WatchInterface) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *WatchInterface) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *WatchInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *WatchInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ watch.Interface = new(WatchInterface)
