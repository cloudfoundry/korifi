// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"code.cloudfoundry.org/korifi/api/authorization"
	"code.cloudfoundry.org/korifi/api/repositories"
)

type AuthorizedInChecker struct {
	AuthorizedInStub        func(context.Context, authorization.Identity, string) (bool, error)
	authorizedInMutex       sync.RWMutex
	authorizedInArgsForCall []struct {
		arg1 context.Context
		arg2 authorization.Identity
		arg3 string
	}
	authorizedInReturns struct {
		result1 bool
		result2 error
	}
	authorizedInReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AuthorizedInChecker) AuthorizedIn(arg1 context.Context, arg2 authorization.Identity, arg3 string) (bool, error) {
	fake.authorizedInMutex.Lock()
	ret, specificReturn := fake.authorizedInReturnsOnCall[len(fake.authorizedInArgsForCall)]
	fake.authorizedInArgsForCall = append(fake.authorizedInArgsForCall, struct {
		arg1 context.Context
		arg2 authorization.Identity
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AuthorizedInStub
	fakeReturns := fake.authorizedInReturns
	fake.recordInvocation("AuthorizedIn", []interface{}{arg1, arg2, arg3})
	fake.authorizedInMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AuthorizedInChecker) AuthorizedInCallCount() int {
	fake.authorizedInMutex.RLock()
	defer fake.authorizedInMutex.RUnlock()
	return len(fake.authorizedInArgsForCall)
}

func (fake *AuthorizedInChecker) AuthorizedInCalls(stub func(context.Context, authorization.Identity, string) (bool, error)) {
	fake.authorizedInMutex.Lock()
	defer fake.authorizedInMutex.Unlock()
	fake.AuthorizedInStub = stub
}

func (fake *AuthorizedInChecker) AuthorizedInArgsForCall(i int) (context.Context, authorization.Identity, string) {
	fake.authorizedInMutex.RLock()
	defer fake.authorizedInMutex.RUnlock()
	argsForCall := fake.authorizedInArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *AuthorizedInChecker) AuthorizedInReturns(result1 bool, result2 error) {
	fake.authorizedInMutex.Lock()
	defer fake.authorizedInMutex.Unlock()
	fake.AuthorizedInStub = nil
	fake.authorizedInReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *AuthorizedInChecker) AuthorizedInReturnsOnCall(i int, result1 bool, result2 error) {
	fake.authorizedInMutex.Lock()
	defer fake.authorizedInMutex.Unlock()
	fake.AuthorizedInStub = nil
	if fake.authorizedInReturnsOnCall == nil {
		fake.authorizedInReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.authorizedInReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *AuthorizedInChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AuthorizedInChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.AuthorizedInChecker = new(AuthorizedInChecker)
